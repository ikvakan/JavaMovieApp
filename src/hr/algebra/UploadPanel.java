/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;


import hr.algebra.model.Movie;

import hr.algebra.model.MoviesTableModel;
import hr.algebra.parser.rss.MovieParser;
import hr.algebra.repo.dal.MovieRepository;
import hr.algebra.repo.dal.RepositoryFactory;
import hr.algebra.utils.MessageUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author IgorKvakan
 */
public class UploadPanel extends javax.swing.JPanel {

   
    private MovieRepository repository;
    //set ili unique collection
    
    private MoviesTableModel moviesTableModel;
    
    
    
    private DefaultComboBoxModel<Movie> defaultComboBoxModel;
    
    public UploadPanel() {
        initComponents();
        init();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpload = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbMovies = new javax.swing.JComboBox<>();
        btnSelect = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnClearSelected = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSelectedMovies = new javax.swing.JTable();

        btnUpload.setBackground(new java.awt.Color(51, 0, 255));
        btnUpload.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpload.setForeground(new java.awt.Color(255, 255, 255));
        btnUpload.setText("Upload movies");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MOVIES");
        jPanel1.add(jLabel2);

        cbMovies.setPreferredSize(new java.awt.Dimension(250, 30));
        jPanel1.add(cbMovies);

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        jPanel1.add(btnSelect);

        btnEdit.setText("Edit");
        jPanel1.add(btnEdit);

        btnClearSelected.setText("Delete movies");
        jPanel1.add(btnClearSelected);

        tblSelectedMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Description", "Director", "Actors", "Duration", "Genre", "PubDate", "PicturePath"
            }
        ));
        jScrollPane2.setViewportView(tblSelectedMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        
        
        if ( cbMovies.getModel().getSize() > 0 ) {

            return;
        }

        try {
            
            if (repository.selectMovies().size() >0) {
                loadCheckBoxModel();
                return;
            }
            
            uploadMovies();
            
            loadCheckBoxModel();
            
        } catch (Exception e) {
            Logger.getLogger(UploadPanel.class.getName()).log(Level.SEVERE, null, e);
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload movies");
        }
          

    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        
        if (cbMovies.getSelectedIndex() == -1) {
            return;
        }
        
        try {
            setTableModel();
            
        } catch (Exception e) {

        }

    }//GEN-LAST:event_btnSelectActionPerformed

    private void uploadMovies() throws Exception, XMLStreamException, IOException {
        Set<Movie> sortedMovies= new TreeSet<>();
        List<Movie> movies= new ArrayList<>();
        
        movies=MovieParser.parse();
        movies.forEach(m->sortedMovies.add(m));
        repository.createMovies(sortedMovies);
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearSelected;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnUpload;
    private javax.swing.JComboBox<Movie> cbMovies;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblSelectedMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            intiRepositry();
            initTable();
        } catch (Exception e) {
            
        }
    }

    private void intiRepositry() {
        repository=RepositoryFactory.getMovieRepository();
    }

    private void initTable() throws IOException, XMLStreamException {
        tblSelectedMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblSelectedMovies.setAutoCreateRowSorter(true);
        tblSelectedMovies.setRowHeight(25);
        
    }

    private void loadCheckBoxModel() throws Exception {
        List<Movie> movies=repository.selectMovies();
        defaultComboBoxModel= new DefaultComboBoxModel<>();
        movies.forEach(m->defaultComboBoxModel.addElement(m));
        cbMovies.setModel(defaultComboBoxModel);
        
    }

    private void setTableModel() {
        List<Movie> selectedMovies= new ArrayList<>();
        Movie movie=(Movie)cbMovies.getSelectedItem();
        selectedMovies.add(movie);
        moviesTableModel= new MoviesTableModel(selectedMovies);
        
        
        tblSelectedMovies.setModel(moviesTableModel);
        
    }

   
}
